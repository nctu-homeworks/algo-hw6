# vim: set syntax=python filetype=python:

import msgpack

### Top-down
"""
class Shooter:
	def __init__(self, targets):
		self.targets = targets
		self.targetLength = len(targets)
		self.DPMem = [None] * self.targetLength

	def maxScore(self):
		return max(self.shootIncreasely(0), self.shootIncreasely(1))

	def shootIncreasely(self, index):
		if index >= self.targetLength:
			return 0, []

		if self.DPMem[index] is None:
			maxScore, maxIndex = max(self.shootIncreasely(index + 2), self.shootIncreasely(index + 3))
			if self.targets[index] > 0:
				self.DPMem[index] = maxScore + self.targets[index], [index + 1] + maxIndex
			else:
				self.DPMem[index] = maxScore, maxIndex
		return self.DPMem[index]
"""

from copy import copy

### Bottom-up
def shooter(targets):
	prevPrevMax = [0, []]
	prevMax = [targets[0], [1]]

	for i in xrange(1, len(targets)):
		if targets[i] + prevPrevMax[0] > prevMax[0]:
			if prevPrevMax is prevMax:
				prevPrevMax = [prevMax[0], copy(prevMax[1])]

			prevPrevMax[0] += targets[i]
			prevPrevMax[1].append(i + 1)
			prevPrevMax, prevMax = prevMax, prevPrevMax
		else:
			prevPrevMax = prevMax
	
	return prevMax


with open("input.txt", "rb") as input_file, open("output.txt", "wb") as output_file:
	inPack = msgpack.Unpacker(input_file, use_list = True)

	problem_count = inPack.unpack()
	for i in xrange(problem_count):
		### Top-down
		# shooter = Shooter(inPack.unpack())
		# maxScore, maxIndex = shooter.maxScore()

		### Bottom-up
		maxScore, maxIndex = shooter(inPack.unpack())

		msgpack.pack(maxScore, output_file)
		msgpack.pack(maxIndex, output_file)
